{"version":3,"sources":["components/CovidChart.js","App.js","reportWebVitals.js","index.js"],"names":["CovidChart","useState","covidData","setData","useEffect","getData","num","a","axios","get","response","data","labels","Object","keys","dates","reverse","nswCases","values","map","v","i","vicCases","slice","console","log","ButtonGroup","variant","color","Button","onClick","datasets","label","fill","borderColor","tension","animations","duration","easing","from","to","loop","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAwIeA,EA/HI,WACjB,MAA4BC,mBAAS,IAArC,mBAAMC,EAAN,KAAiBC,EAAjB,KAGAC,qBAAU,WACJF,GACFG,MAED,IAEH,IAAMA,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sEACOC,IAAMC,IAd7B,kFAagB,cACVC,EADU,gBAEGA,EAASC,KAFZ,OAEVA,EAFU,OAIVC,EAASD,GAAQE,OAAOC,KAAKH,EAAI,IAAQI,OAAOC,UAGpDC,GADIA,EAAWN,GAAQE,OAAOK,OAAOP,EAAK,mBAAmBI,OAAOC,YAC7CC,EAASE,KAAI,SAACC,EAAGC,EAAGd,GAAP,OAAaa,GAAKb,EAAEc,EAAI,IAAM,MAIlEC,GADIA,EAAWX,GAAQE,OAAOK,OAAOP,EAAI,SAAaI,OAAOC,YACtCM,EAASH,KAAI,SAACC,EAAGC,EAAGd,GAAP,OAAaa,GAAKb,EAAEc,EAAI,IAAM,MAE/Df,IACDW,EAAWA,EAASM,MAAMjB,GAC1BgB,EAAWA,EAASC,MAAMjB,GAC1BM,EAASA,EAAOW,MAAMjB,GACtBkB,QAAQC,IAAIR,EAAUK,EAAUV,IAGlCT,EAAQ,CAACS,SAAQK,WAAUK,aApBb,4CAAH,sDAwBX,OACE,gCACE,eAACI,EAAA,EAAD,CACEC,QAAU,YACVC,MAAM,UACN,aAAW,iCAHb,UAKE,cAACC,EAAA,EAAD,CACEC,QAAS,WACPzB,GAAS,IAFb,gBAOA,cAACwB,EAAA,EAAD,CACEC,QAAS,WACPzB,GAAS,KAFb,gBAOA,cAACwB,EAAA,EAAD,CACEC,QAAS,WACPzB,GAAS,KAFb,gBAOA,cAACwB,EAAA,EAAD,CACEC,QAAS,WACPzB,GAAS,MAFb,gBAOA,cAACwB,EAAA,EAAD,CACEC,QAAS,WACPzB,GAAS,MAFb,iBAOA,cAACwB,EAAA,EAAD,CACEC,QAAS,WACPzB,KAFJ,oBAQF,cAAC,IAAD,CACEM,KAAM,CACJC,OAAQV,EAAUU,OAClBmB,SAAU,CACR,CACEC,MAAO,MACPrB,KAAMT,EAAUe,SAChBgB,MAAM,EACNC,YAAa,UACbC,QAAS,GACTC,WAAY,CACVD,QAAS,CACPE,SAAU,IACVC,OAAQ,SACRC,KAAM,EACNC,GAAI,EACJC,MAAM,KAIZ,CACET,MAAO,MACPrB,KAAMT,EAAUoB,SAChBW,MAAM,EACNC,YAAa,UACbC,QAAS,GACTC,WAAY,CACVD,QAAS,CACPE,SAAU,IACVC,OAAQ,SACRC,KAAM,EACNC,GAAI,EACJC,MAAM,a,OClHXC,MARf,WACI,OACI,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,OCMGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.124546d4.chunk.js","sourcesContent":["import axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport {Line} from 'react-chartjs-2'\nimport { ButtonGroup, Button } from '@material-ui/core';\n\nconst API_URL =\n  \"https://covid-api.mmediagroup.fr/v1/history?country=Australia&status=confirmed\";\n\n\nconst CovidChart = () => {\n  const[covidData, setData] = useState(\"\");\n  \n  \n  useEffect(()=> {\n    if(!covidData){\n      getData();\n    }\n  }, []);\n\n  const getData = async (num) => {\n    let response = await axios.get(API_URL);\n    let data = await response.data;\n    \n    var labels = data && Object.keys(data[\"All\"].dates).reverse();\n  //NSW DATA\n    var nswCases = data && Object.values(data[\"New South Wales\"].dates).reverse();\n    nswCases = nswCases && nswCases.map((v, i, a) => v - (a[i - 1] || 0));\n  \n  //VIC DATA\n    var vicCases = data && Object.values(data[\"Victoria\"].dates).reverse();\n    vicCases = vicCases && vicCases.map((v, i, a) => v - (a[i - 1] || 0));\n\n    if(num){\n      nswCases = nswCases.slice(num);\n      vicCases = vicCases.slice(num);\n      labels = labels.slice(num);\n      console.log(nswCases, vicCases, labels)\n    }\n\n    setData({labels, nswCases, vicCases});\n  }\n\n\n    return (\n      <div>\n        <ButtonGroup\n          variant = \"contained\"\n          color=\"primary\"\n          aria-label=\"contained primary button group\"\n        >\n          <Button\n            onClick={() => {\n              getData(-7);\n            }}\n          >\n            1W\n          </Button>\n          <Button\n            onClick={() => {\n              getData(-30);\n            }}\n          >\n            1M\n          </Button>\n          <Button\n            onClick={() => {\n              getData(-90);\n            }}\n          >\n            3M\n          </Button>\n          <Button\n            onClick={() => {\n              getData(-180);\n            }}\n          >\n            6M\n          </Button>\n          <Button\n            onClick={() => {\n              getData(-360);\n            }}\n          >\n            12M\n          </Button>\n          <Button\n            onClick={() => {\n              getData();\n            }}\n          >\n            ALL\n          </Button>\n        </ButtonGroup>\n        <Line\n          data={{\n            labels: covidData.labels,\n            datasets: [\n              {\n                label: \"NSW\",\n                data: covidData.nswCases,\n                fill: false,\n                borderColor: \"#36a2eb\",\n                tension: 0.1,\n                animations: {\n                  tension: {\n                    duration: 1000,\n                    easing: \"linear\",\n                    from: 1,\n                    to: 0,\n                    loop: true,\n                  },\n                },\n              },\n              {\n                label: \"Vic\",\n                data: covidData.vicCases,\n                fill: false,\n                borderColor: \"#ff6384\",\n                tension: 0.1,\n                animations: {\n                  tension: {\n                    duration: 1000,\n                    easing: \"linear\",\n                    from: 1,\n                    to: 0,\n                    loop: true,\n                  },\n                },\n              },\n            ],\n          }}\n        />\n      </div>\n    );\n}\n\nexport default CovidChart;","import CovidChart from './components/CovidChart';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <CovidChart/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}